{"version":3,"sources":["App.js","index.js"],"names":["App","useState","value","isChecked","placeholder","list","setList","result","setResult","operand","setOperand","handleOperandChange","isCheckedCount","reduce","total","item","useEffect","alert","parseInt","Card","Header","Body","Form","className","map","index","Group","as","Row","Col","sm","span","offset","Control","onChange","event","selectedIndex","target","type","disabled","Check","checked","Button","onClick","variant","Footer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2daabc0a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, Button, Form, Row, Col } from 'react-bootstrap';\r\n\r\nfunction App() {\r\n    const [list, setList] = useState([\r\n        { value: \"0\", isChecked: true, placeholder: \"input1\" },\r\n        { value: \"0\", isChecked: true, placeholder: \"input2\" },\r\n        { value: \"0\", isChecked: false, placeholder: \"input3\" }]\r\n    )\r\n\r\n    const [result, setResult] = useState(0);\r\n    const [operand, setOperand] = useState(\"+\");\r\n\r\n    const handleInputChange = (selectedIndex, value) => {\r\n        setList(list.map((item, index) => {\r\n            if (selectedIndex === index) {\r\n                return { ...item, value: value }\r\n            } return item\r\n        }))\r\n    }\r\n\r\n    const handleCheckboxChange = (selectedIndex, value) => {\r\n        setList(list.map((item, index) => {\r\n            if (selectedIndex === index) {\r\n                return { ...item, isChecked: value }\r\n            } return item\r\n        }))\r\n    }\r\n\r\n    const handleOperandChange = (value) => {\r\n        setOperand(value)\r\n    }\r\n\r\n    const isCheckedCount = list.reduce((total, item) => {\r\n        return total + (item.isChecked ? 1 : 0)\r\n    }, 0)\r\n\r\n    useEffect(() => {\r\n        if (isCheckedCount === 1) {\r\n            alert(\"Error! tick 2 checkboxes or more!\")\r\n        } else if (isCheckedCount === 0) {\r\n            setResult(0)\r\n        }\r\n        else {\r\n            switch (operand) {\r\n                default:\r\n                    setResult(\r\n                        list.reduce((total, item) => {\r\n                            return item.isChecked ? parseInt(item.value, 10) + total : total\r\n                        }, 0))\r\n                break\r\n                case \"-\":\r\n                    setResult(\r\n                        list.reduce((total, item) => {\r\n                            if(item.isChecked === true){\r\n                                if(total === 0){\r\n                                    return parseInt(item.value, 10)\r\n                                }else {\r\n                                    return total - parseInt(item.value, 10) \r\n                                }\r\n                            }\r\n                            return total\r\n                        }, 0))\r\n                break\r\n                case \"x\":\r\n                    setResult(\r\n                        list.reduce((total, item) => {\r\n                            return item.isChecked ? parseInt(item.value, 10) * total : total\r\n                        }, 1))\r\n                break\r\n                case \"/\":\r\n                    setResult(\r\n                        list.reduce((total, item) => {\r\n                            return item.isChecked ? parseInt(item.value, 10) / total : total\r\n                        }, 1))\r\n                break\r\n            }\r\n        }\r\n    }, [list, isCheckedCount, operand]);\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Header>Ilyas Abduttawab</Card.Header>\r\n            <Card.Body>\r\n                <Form className={\"container\"}>\r\n                    {list.map((item, index) => {\r\n                        return (<Form.Group as={Row} key={index}>\r\n                            <Col sm={{ span: 4, offset: 2 }}>\r\n                                <Form.Control onChange={(event) => handleInputChange(index, event.target.value)} placeholder={item.placeholder} type=\"number\" value={item.value} disabled={!item.isChecked}/>\r\n                            </Col>\r\n                            <Form.Check type=\"checkbox\" checked={item.isChecked} value={item.isChecked} onChange={(event) => handleCheckboxChange(index, event.target.checked)} />\r\n                        </Form.Group>)\r\n                    })}\r\n\r\n                    <Col sm={{ offset: 3 }}>\r\n                        <Button onClick={() => handleOperandChange(\"+\")} variant={operand === \"+\" ? \"success\" : \"primary\"}>+</Button> {' '}\r\n                        <Button onClick={() => handleOperandChange(\"-\")} variant={operand === \"-\" ? \"success\" : \"primary\"}>-</Button> {' '}\r\n                        <Button onClick={() => handleOperandChange(\"x\")} variant={operand === \"x\" ? \"success\" : \"primary\"}>x</Button> {' '}\r\n                        <Button onClick={() => handleOperandChange(\"/\")} variant={operand === \"/\" ? \"success\" : \"primary\"}>/</Button> {' '}\r\n                    </Col>\r\n                </Form>\r\n            </Card.Body>\r\n            <Card.Footer className=\"text-muted\">{`Results: ${result}`}</Card.Footer>\r\n        </Card>\r\n    );\r\n}\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}